package org.drools.examples.sudoku

global Boolean explain;

rule "halt after setup"
when
    $ctr: Counter( count == 0 )
then
    System.out.println( "drools.halt()" );
    drools.halt();
end

// A Setting object is inserted to define the value of a Cell.
// Rule "set a value" updates the cell and all cell groups containing it.
rule "set a value"
when
    // a Setting with row and column number, and a value
    $s: Setting( $rn: rowNo, $cn: colNo, $v: value )

    // a matching Cell, with no value set
    $c: Cell( rowNo == $rn, colNo == $cn, value == null,
              $cr: cellRow, $cc: cellCol, $cs: cellSqr )

    // count down
    $ctr: Counter( $count: count )
then
    // modify the Cell by setting its value
    modify( $c ){ setValue( $v ) }
    System.out.println( "set cell " + $c.toString() );
    modify( $cr ){ blockValue( $v ) }
    modify( $cc ){ blockValue( $v ) }
    modify( $cs ){ blockValue( $v ) }
    modify( $ctr ){ setCount( $count - 1 ) }
end

// Rule for removing a value from all cells that are siblings
// in one of the three cell groups.
rule "eliminate a value from Cell"
when
    // a Setting with row and column number, and a value
    $s: Setting( $rn: rowNo, $cn: colNo, $v: value )

    // the matching Cell, with the value already set
    Cell( rowNo == $rn, colNo == $cn, value == $v, $exCells: exCells )

    // for all Cells that are in cahoots with the updated cell
    $c: Cell( free contains $v ) from $exCells
then
    System.out.println( "clear " + $v + " from cell " + $c.posAsString()  );
    // modify a related Cell by blocking the assigned value
    modify( $c ){ blockValue( $v ) }
end
